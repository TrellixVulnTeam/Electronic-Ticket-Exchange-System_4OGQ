{"changed":true,"filter":false,"title":"Untitled1","tooltip":"/Untitled1","value":"import csv\n\ndef main():\n    bad_browser_dict = {} #The map to store the key and String value of bad_browser_blurb_params.csv\n    with open('bad_browser_blurb_params.csv') as csvfile: #open file\n        reader = csv.DictReader(csvfile) #reader -> Similar to Scanner in Java\n        for row in reader: #For every row in the csv file\n           bad_browser_dict[row['key']] = row['String value'] #add every key and value from csv file to the map\n\n        for key, value in bad_browser_dict.items():\n            print (key, value + \"\\n\") #For testing purposes, see if it added correctly\n\nif _name_ == '_main_':\n    main()\n    \nimport csv\nfrom FileManager import FileManager\ndef main():\n    fileManager = FileManager(\"bad_browser_blurb_params.csv\")\n    fileManager.read_test_file() #reads the bad_browser_blurb_params.csv file\n\nif _name_ == '_main_':\n    main()\n    \nimport csv\nclass FileManager(object):\n    '''\n    This class manages file based on what the user wants to test\n    '''\n\n    def __init__(self, fileName):\n        '''\n        :param self:\n        :param fileName: The file the user wants to run test cases\n        '''\n        self.fileName = fileName\n        self.test_dictionary = {}\n\n    def read_test_file(self):\n        '''\n        Reading the file and storing it into a dictionary data structure\n        '''\n        with open(self.fileName) as csvfile:  # open file\n            reader = csv.DictReader(csvfile)  # reader -> Similar to Scanner in Java\n            for row in reader:  # For every row in the csv file\n                self.test_dictionary[row['key']] = row['String value']  # add every key and value from csv file to the map\n\n            for key, value in self.test_dictionary.items():\n                print(key, value + \"\\n\")  # For testing purposes, see if it added correctly to the test_dictionary\n\n    #Methods to write for FileManager\n    #Write to file (Pass, Fail), Indicate what system and string value failed\n    #Check if it the String value matches to the system you are checking","undoManager":{"mark":-2,"position":11,"stack":[[{"start":{"row":0,"column":0},"end":{"row":13,"column":10},"action":"insert","lines":["import csv","","def main():","    bad_browser_dict = {} #The map to store the key and String value of bad_browser_blurb_params.csv","    with open('bad_browser_blurb_params.csv') as csvfile: #open file","        reader = csv.DictReader(csvfile) #reader -> Similar to Scanner in Java","        for row in reader: #For every row in the csv file","           bad_browser_dict[row['key']] = row['String value'] #add every key and value from csv file to the map","","        for key, value in bad_browser_dict.items():","            print (key, value + \"\\n\") #For testing purposes, see if it added correctly","","if _name_ == '_main_':","    main()"],"id":1}],[{"start":{"row":13,"column":10},"end":{"row":14,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":14,"column":0},"end":{"row":14,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":14,"column":4},"end":{"row":15,"column":0},"action":"insert","lines":["",""],"id":3},{"start":{"row":15,"column":0},"end":{"row":15,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":15,"column":0},"end":{"row":15,"column":4},"action":"remove","lines":["    "],"id":4}],[{"start":{"row":14,"column":4},"end":{"row":15,"column":0},"action":"remove","lines":["",""],"id":5}],[{"start":{"row":14,"column":4},"end":{"row":15,"column":0},"action":"insert","lines":["",""],"id":6},{"start":{"row":15,"column":0},"end":{"row":15,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":15,"column":0},"end":{"row":15,"column":4},"action":"remove","lines":["    "],"id":7}],[{"start":{"row":15,"column":0},"end":{"row":22,"column":10},"action":"insert","lines":["import csv","from FileManager import FileManager","def main():","    fileManager = FileManager(\"bad_browser_blurb_params.csv\")","    fileManager.read_test_file() #reads the bad_browser_blurb_params.csv file","","if _name_ == '_main_':","    main()"],"id":8}],[{"start":{"row":22,"column":10},"end":{"row":23,"column":0},"action":"insert","lines":["",""],"id":9},{"start":{"row":23,"column":0},"end":{"row":23,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":23,"column":4},"end":{"row":24,"column":0},"action":"insert","lines":["",""],"id":10},{"start":{"row":24,"column":0},"end":{"row":24,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":24,"column":0},"end":{"row":24,"column":4},"action":"remove","lines":["    "],"id":11}],[{"start":{"row":24,"column":0},"end":{"row":52,"column":72},"action":"insert","lines":["import csv","class FileManager(object):","    '''","    This class manages file based on what the user wants to test","    '''","","    def __init__(self, fileName):","        '''","        :param self:","        :param fileName: The file the user wants to run test cases","        '''","        self.fileName = fileName","        self.test_dictionary = {}","","    def read_test_file(self):","        '''","        Reading the file and storing it into a dictionary data structure","        '''","        with open(self.fileName) as csvfile:  # open file","            reader = csv.DictReader(csvfile)  # reader -> Similar to Scanner in Java","            for row in reader:  # For every row in the csv file","                self.test_dictionary[row['key']] = row['String value']  # add every key and value from csv file to the map","","            for key, value in self.test_dictionary.items():","                print(key, value + \"\\n\")  # For testing purposes, see if it added correctly to the test_dictionary","","    #Methods to write for FileManager","    #Write to file (Pass, Fail), Indicate what system and string value failed","    #Check if it the String value matches to the system you are checking"],"id":12}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":12,"column":0},"end":{"row":13,"column":10},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1504549962968}