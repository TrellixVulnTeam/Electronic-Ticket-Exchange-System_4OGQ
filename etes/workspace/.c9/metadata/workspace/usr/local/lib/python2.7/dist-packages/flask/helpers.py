{"changed":false,"filter":false,"title":"helpers.py","tooltip":"/usr/local/lib/python2.7/dist-packages/flask/helpers.py","value":"# -*- coding: utf-8 -*-\n\"\"\"\n    flask.helpers\n    ~~~~~~~~~~~~~\n\n    Implements various helpers.\n\n    :copyright: (c) 2015 by Armin Ronacher.\n    :license: BSD, see LICENSE for more details.\n\"\"\"\n\nimport os\nimport sys\nimport pkgutil\nimport posixpath\nimport mimetypes\nfrom time import time\nfrom zlib import adler32\nfrom threading import RLock\nfrom werkzeug.routing import BuildError\nfrom functools import update_wrapper\n\ntry:\n    from werkzeug.urls import url_quote\nexcept ImportError:\n    from urlparse import quote as url_quote\n\nfrom werkzeug.datastructures import Headers, Range\nfrom werkzeug.exceptions import BadRequest, NotFound, \\\n    RequestedRangeNotSatisfiable\n\n# this was moved in 0.7\ntry:\n    from werkzeug.wsgi import wrap_file\nexcept ImportError:\n    from werkzeug.utils import wrap_file\n\nfrom jinja2 import FileSystemLoader\n\nfrom .signals import message_flashed\nfrom .globals import session, _request_ctx_stack, _app_ctx_stack, \\\n     current_app, request\nfrom ._compat import string_types, text_type\n\n\n# sentinel\n_missing = object()\n\n\n# what separators does this operating system provide that are not a slash?\n# this is used by the send_from_directory function to ensure that nobody is\n# able to access files from outside the filesystem.\n_os_alt_seps = list(sep for sep in [os.path.sep, os.path.altsep]\n                    if sep not in (None, '/'))\n\n\ndef get_debug_flag(default=None):\n    val = os.environ.get('FLASK_DEBUG')\n    if not val:\n        return default\n    return val not in ('0', 'false', 'no')\n\n\ndef _endpoint_from_view_func(view_func):\n    \"\"\"Internal helper that returns the default endpoint for a given\n    function.  This always is the function name.\n    \"\"\"\n    assert view_func is not None, 'expected view func if endpoint ' \\\n                                  'is not provided.'\n    return view_func.__name__\n\n\ndef stream_with_context(generator_or_function):\n    \"\"\"Request contexts disappear when the response is started on the server.\n    This is done for efficiency reasons and to make it less likely to encounter\n    memory leaks with badly written WSGI middlewares.  The downside is that if\n    you are using streamed responses, the generator cannot access request bound\n    information any more.\n\n    This function however can help you keep the context around for longer::\n\n        from flask import stream_with_context, request, Response\n\n        @app.route('/stream')\n        def streamed_response():\n            @stream_with_context\n            def generate():\n                yield 'Hello '\n                yield request.args['name']\n                yield '!'\n            return Response(generate())\n\n    Alternatively it can also be used around a specific generator::\n\n        from flask import stream_with_context, request, Response\n\n        @app.route('/stream')\n        def streamed_response():\n            def generate():\n                yield 'Hello '\n                yield request.args['name']\n                yield '!'\n            return Response(stream_with_context(generate()))\n\n    .. versionadded:: 0.9\n    \"\"\"\n    try:\n        gen = iter(generator_or_function)\n    except TypeError:\n        def decorator(*args, **kwargs):\n            gen = generator_or_function(*args, **kwargs)\n            return stream_with_context(gen)\n        return update_wrapper(decorator, generator_or_function)\n\n    def generator():\n        ctx = _request_ctx_stack.top\n        if ctx is None:\n            raise RuntimeError('Attempted to stream with context but '\n                'there was no context in the first place to keep around.')\n        with ctx:\n            # Dummy sentinel.  Has to be inside the context block or we're\n            # not actually keeping the context around.\n            yield None\n\n            # The try/finally is here so that if someone passes a WSGI level\n            # iterator in we're still running the cleanup logic.  Generators\n            # don't need that because they are closed on their destruction\n            # automatically.\n            try:\n                for item in gen:\n                    yield item\n            finally:\n                if hasattr(gen, 'close'):\n                    gen.close()\n\n    # The trick is to start the generator.  Then the code execution runs until\n    # the first dummy None is yielded at which point the context was already\n    # pushed.  This item is discarded.  Then when the iteration continues the\n    # real generator is executed.\n    wrapped_g = generator()\n    next(wrapped_g)\n    return wrapped_g\n\n\ndef make_response(*args):\n    \"\"\"Sometimes it is necessary to set additional headers in a view.  Because\n    views do not have to return response objects but can return a value that\n    is converted into a response object by Flask itself, it becomes tricky to\n    add headers to it.  This function can be called instead of using a return\n    and you will get a response object which you can use to attach headers.\n\n    If view looked like this and you want to add a new header::\n\n        def index():\n            return render_template('index.html', foo=42)\n\n    You can now do something like this::\n\n        def index():\n            response = make_response(render_template('index.html', foo=42))\n            response.headers['X-Parachutes'] = 'parachutes are cool'\n            return response\n\n    This function accepts the very same arguments you can return from a\n    view function.  This for example creates a response with a 404 error\n    code::\n\n        response = make_response(render_template('not_found.html'), 404)\n\n    The other use case of this function is to force the return value of a\n    view function into a response which is helpful with view\n    decorators::\n\n        response = make_response(view_function())\n        response.headers['X-Parachutes'] = 'parachutes are cool'\n\n    Internally this function does the following things:\n\n    -   if no arguments are passed, it creates a new response argument\n    -   if one argument is passed, :meth:`flask.Flask.make_response`\n        is invoked with it.\n    -   if more than one argument is passed, the arguments are passed\n        to the :meth:`flask.Flask.make_response` function as tuple.\n\n    .. versionadded:: 0.6\n    \"\"\"\n    if not args:\n        return current_app.response_class()\n    if len(args) == 1:\n        args = args[0]\n    return current_app.make_response(args)\n\n\ndef url_for(endpoint, **values):\n    \"\"\"Generates a URL to the given endpoint with the method provided.\n\n    Variable arguments that are unknown to the target endpoint are appended\n    to the generated URL as query arguments.  If the value of a query argument\n    is ``None``, the whole pair is skipped.  In case blueprints are active\n    you can shortcut references to the same blueprint by prefixing the\n    local endpoint with a dot (``.``).\n\n    This will reference the index function local to the current blueprint::\n\n        url_for('.index')\n\n    For more information, head over to the :ref:`Quickstart <url-building>`.\n\n    To integrate applications, :class:`Flask` has a hook to intercept URL build\n    errors through :attr:`Flask.url_build_error_handlers`.  The `url_for`\n    function results in a :exc:`~werkzeug.routing.BuildError` when the current\n    app does not have a URL for the given endpoint and values.  When it does, the\n    :data:`~flask.current_app` calls its :attr:`~Flask.url_build_error_handlers` if\n    it is not ``None``, which can return a string to use as the result of\n    `url_for` (instead of `url_for`'s default to raise the\n    :exc:`~werkzeug.routing.BuildError` exception) or re-raise the exception.\n    An example::\n\n        def external_url_handler(error, endpoint, values):\n            \"Looks up an external URL when `url_for` cannot build a URL.\"\n            # This is an example of hooking the build_error_handler.\n            # Here, lookup_url is some utility function you've built\n            # which looks up the endpoint in some external URL registry.\n            url = lookup_url(endpoint, **values)\n            if url is None:\n                # External lookup did not have a URL.\n                # Re-raise the BuildError, in context of original traceback.\n                exc_type, exc_value, tb = sys.exc_info()\n                if exc_value is error:\n                    raise exc_type, exc_value, tb\n                else:\n                    raise error\n            # url_for will use this result, instead of raising BuildError.\n            return url\n\n        app.url_build_error_handlers.append(external_url_handler)\n\n    Here, `error` is the instance of :exc:`~werkzeug.routing.BuildError`, and\n    `endpoint` and `values` are the arguments passed into `url_for`.  Note\n    that this is for building URLs outside the current application, and not for\n    handling 404 NotFound errors.\n\n    .. versionadded:: 0.10\n       The `_scheme` parameter was added.\n\n    .. versionadded:: 0.9\n       The `_anchor` and `_method` parameters were added.\n\n    .. versionadded:: 0.9\n       Calls :meth:`Flask.handle_build_error` on\n       :exc:`~werkzeug.routing.BuildError`.\n\n    :param endpoint: the endpoint of the URL (name of the function)\n    :param values: the variable arguments of the URL rule\n    :param _external: if set to ``True``, an absolute URL is generated. Server\n      address can be changed via ``SERVER_NAME`` configuration variable which\n      defaults to `localhost`.\n    :param _scheme: a string specifying the desired URL scheme. The `_external`\n      parameter must be set to ``True`` or a :exc:`ValueError` is raised. The default\n      behavior uses the same scheme as the current request, or\n      ``PREFERRED_URL_SCHEME`` from the :ref:`app configuration <config>` if no\n      request context is available. As of Werkzeug 0.10, this also can be set\n      to an empty string to build protocol-relative URLs.\n    :param _anchor: if provided this is added as anchor to the URL.\n    :param _method: if provided this explicitly specifies an HTTP method.\n    \"\"\"\n    appctx = _app_ctx_stack.top\n    reqctx = _request_ctx_stack.top\n    if appctx is None:\n        raise RuntimeError('Attempted to generate a URL without the '\n                           'application context being pushed. This has to be '\n                           'executed when application context is available.')\n\n    # If request specific information is available we have some extra\n    # features that support \"relative\" URLs.\n    if reqctx is not None:\n        url_adapter = reqctx.url_adapter\n        blueprint_name = request.blueprint\n        if not reqctx.request._is_old_module:\n            if endpoint[:1] == '.':\n                if blueprint_name is not None:\n                    endpoint = blueprint_name + endpoint\n                else:\n                    endpoint = endpoint[1:]\n        else:\n            # TODO: get rid of this deprecated functionality in 1.0\n            if '.' not in endpoint:\n                if blueprint_name is not None:\n                    endpoint = blueprint_name + '.' + endpoint\n            elif endpoint.startswith('.'):\n                endpoint = endpoint[1:]\n        external = values.pop('_external', False)\n\n    # Otherwise go with the url adapter from the appctx and make\n    # the URLs external by default.\n    else:\n        url_adapter = appctx.url_adapter\n        if url_adapter is None:\n            raise RuntimeError('Application was not able to create a URL '\n                               'adapter for request independent URL generation. '\n                               'You might be able to fix this by setting '\n                               'the SERVER_NAME config variable.')\n        external = values.pop('_external', True)\n\n    anchor = values.pop('_anchor', None)\n    method = values.pop('_method', None)\n    scheme = values.pop('_scheme', None)\n    appctx.app.inject_url_defaults(endpoint, values)\n\n    # This is not the best way to deal with this but currently the\n    # underlying Werkzeug router does not support overriding the scheme on\n    # a per build call basis.\n    old_scheme = None\n    if scheme is not None:\n        if not external:\n            raise ValueError('When specifying _scheme, _external must be True')\n        old_scheme = url_adapter.url_scheme\n        url_adapter.url_scheme = scheme\n\n    try:\n        try:\n            rv = url_adapter.build(endpoint, values, method=method,\n                                   force_external=external)\n        finally:\n            if old_scheme is not None:\n                url_adapter.url_scheme = old_scheme\n    except BuildError as error:\n        # We need to inject the values again so that the app callback can\n        # deal with that sort of stuff.\n        values['_external'] = external\n        values['_anchor'] = anchor\n        values['_method'] = method\n        return appctx.app.handle_url_build_error(error, endpoint, values)\n\n    if anchor is not None:\n        rv += '#' + url_quote(anchor)\n    return rv\n\n\ndef get_template_attribute(template_name, attribute):\n    \"\"\"Loads a macro (or variable) a template exports.  This can be used to\n    invoke a macro from within Python code.  If you for example have a\n    template named :file:`_cider.html` with the following contents:\n\n    .. sourcecode:: html+jinja\n\n       {% macro hello(name) %}Hello {{ name }}!{% endmacro %}\n\n    You can access this from Python code like this::\n\n        hello = get_template_attribute('_cider.html', 'hello')\n        return hello('World')\n\n    .. versionadded:: 0.2\n\n    :param template_name: the name of the template\n    :param attribute: the name of the variable of macro to access\n    \"\"\"\n    return getattr(current_app.jinja_env.get_template(template_name).module,\n                   attribute)\n\n\ndef flash(message, category='message'):\n    \"\"\"Flashes a message to the next request.  In order to remove the\n    flashed message from the session and to display it to the user,\n    the template has to call :func:`get_flashed_messages`.\n\n    .. versionchanged:: 0.3\n       `category` parameter added.\n\n    :param message: the message to be flashed.\n    :param category: the category for the message.  The following values\n                     are recommended: ``'message'`` for any kind of message,\n                     ``'error'`` for errors, ``'info'`` for information\n                     messages and ``'warning'`` for warnings.  However any\n                     kind of string can be used as category.\n    \"\"\"\n    # Original implementation:\n    #\n    #     session.setdefault('_flashes', []).append((category, message))\n    #\n    # This assumed that changes made to mutable structures in the session are\n    # are always in sync with the session object, which is not true for session\n    # implementations that use external storage for keeping their keys/values.\n    flashes = session.get('_flashes', [])\n    flashes.append((category, message))\n    session['_flashes'] = flashes\n    message_flashed.send(current_app._get_current_object(),\n                         message=message, category=category)\n\n\ndef get_flashed_messages(with_categories=False, category_filter=[]):\n    \"\"\"Pulls all flashed messages from the session and returns them.\n    Further calls in the same request to the function will return\n    the same messages.  By default just the messages are returned,\n    but when `with_categories` is set to ``True``, the return value will\n    be a list of tuples in the form ``(category, message)`` instead.\n\n    Filter the flashed messages to one or more categories by providing those\n    categories in `category_filter`.  This allows rendering categories in\n    separate html blocks.  The `with_categories` and `category_filter`\n    arguments are distinct:\n\n    * `with_categories` controls whether categories are returned with message\n      text (``True`` gives a tuple, where ``False`` gives just the message text).\n    * `category_filter` filters the messages down to only those matching the\n      provided categories.\n\n    See :ref:`message-flashing-pattern` for examples.\n\n    .. versionchanged:: 0.3\n       `with_categories` parameter added.\n\n    .. versionchanged:: 0.9\n        `category_filter` parameter added.\n\n    :param with_categories: set to ``True`` to also receive categories.\n    :param category_filter: whitelist of categories to limit return values\n    \"\"\"\n    flashes = _request_ctx_stack.top.flashes\n    if flashes is None:\n        _request_ctx_stack.top.flashes = flashes = session.pop('_flashes') \\\n            if '_flashes' in session else []\n    if category_filter:\n        flashes = list(filter(lambda f: f[0] in category_filter, flashes))\n    if not with_categories:\n        return [x[1] for x in flashes]\n    return flashes\n\n\ndef send_file(filename_or_fp, mimetype=None, as_attachment=False,\n              attachment_filename=None, add_etags=True,\n              cache_timeout=None, conditional=False, last_modified=None):\n    \"\"\"Sends the contents of a file to the client.  This will use the\n    most efficient method available and configured.  By default it will\n    try to use the WSGI server's file_wrapper support.  Alternatively\n    you can set the application's :attr:`~Flask.use_x_sendfile` attribute\n    to ``True`` to directly emit an ``X-Sendfile`` header.  This however\n    requires support of the underlying webserver for ``X-Sendfile``.\n\n    By default it will try to guess the mimetype for you, but you can\n    also explicitly provide one.  For extra security you probably want\n    to send certain files as attachment (HTML for instance).  The mimetype\n    guessing requires a `filename` or an `attachment_filename` to be\n    provided.\n\n    ETags will also be attached automatically if a `filename` is provided. You\n    can turn this off by setting `add_etags=False`.\n\n    If `conditional=True` and `filename` is provided, this method will try to\n    upgrade the response stream to support range requests.  This will allow\n    the request to be answered with partial content response.\n\n    Please never pass filenames to this function from user sources;\n    you should use :func:`send_from_directory` instead.\n\n    .. versionadded:: 0.2\n\n    .. versionadded:: 0.5\n       The `add_etags`, `cache_timeout` and `conditional` parameters were\n       added.  The default behavior is now to attach etags.\n\n    .. versionchanged:: 0.7\n       mimetype guessing and etag support for file objects was\n       deprecated because it was unreliable.  Pass a filename if you are\n       able to, otherwise attach an etag yourself.  This functionality\n       will be removed in Flask 1.0\n\n    .. versionchanged:: 0.9\n       cache_timeout pulls its default from application config, when None.\n\n    .. versionchanged:: 0.12\n       The filename is no longer automatically inferred from file objects. If\n       you want to use automatic mimetype and etag support, pass a filepath via\n       `filename_or_fp` or `attachment_filename`.\n\n    .. versionchanged:: 0.12\n       The `attachment_filename` is preferred over `filename` for MIME-type\n       detection.\n\n    :param filename_or_fp: the filename of the file to send in `latin-1`.\n                           This is relative to the :attr:`~Flask.root_path`\n                           if a relative path is specified.\n                           Alternatively a file object might be provided in\n                           which case ``X-Sendfile`` might not work and fall\n                           back to the traditional method.  Make sure that the\n                           file pointer is positioned at the start of data to\n                           send before calling :func:`send_file`.\n    :param mimetype: the mimetype of the file if provided. If a file path is\n                     given, auto detection happens as fallback, otherwise an\n                     error will be raised.\n    :param as_attachment: set to ``True`` if you want to send this file with\n                          a ``Content-Disposition: attachment`` header.\n    :param attachment_filename: the filename for the attachment if it\n                                differs from the file's filename.\n    :param add_etags: set to ``False`` to disable attaching of etags.\n    :param conditional: set to ``True`` to enable conditional responses.\n\n    :param cache_timeout: the timeout in seconds for the headers. When ``None``\n                          (default), this value is set by\n                          :meth:`~Flask.get_send_file_max_age` of\n                          :data:`~flask.current_app`.\n    :param last_modified: set the ``Last-Modified`` header to this value,\n        a :class:`~datetime.datetime` or timestamp.\n        If a file was passed, this overrides its mtime.\n    \"\"\"\n    mtime = None\n    fsize = None\n    if isinstance(filename_or_fp, string_types):\n        filename = filename_or_fp\n        if not os.path.isabs(filename):\n            filename = os.path.join(current_app.root_path, filename)\n        file = None\n        if attachment_filename is None:\n            attachment_filename = os.path.basename(filename)\n    else:\n        file = filename_or_fp\n        filename = None\n\n    if mimetype is None:\n        if attachment_filename is not None:\n            mimetype = mimetypes.guess_type(attachment_filename)[0] \\\n                or 'application/octet-stream'\n\n        if mimetype is None:\n            raise ValueError(\n                'Unable to infer MIME-type because no filename is available. '\n                'Please set either `attachment_filename`, pass a filepath to '\n                '`filename_or_fp` or set your own MIME-type via `mimetype`.'\n            )\n\n    headers = Headers()\n    if as_attachment:\n        if attachment_filename is None:\n            raise TypeError('filename unavailable, required for '\n                            'sending as attachment')\n        headers.add('Content-Disposition', 'attachment',\n                    filename=attachment_filename)\n\n    if current_app.use_x_sendfile and filename:\n        if file is not None:\n            file.close()\n        headers['X-Sendfile'] = filename\n        fsize = os.path.getsize(filename)\n        headers['Content-Length'] = fsize\n        data = None\n    else:\n        if file is None:\n            file = open(filename, 'rb')\n            mtime = os.path.getmtime(filename)\n            fsize = os.path.getsize(filename)\n            headers['Content-Length'] = fsize\n        data = wrap_file(request.environ, file)\n\n    rv = current_app.response_class(data, mimetype=mimetype, headers=headers,\n                                    direct_passthrough=True)\n\n    if last_modified is not None:\n        rv.last_modified = last_modified\n    elif mtime is not None:\n        rv.last_modified = mtime\n\n    rv.cache_control.public = True\n    if cache_timeout is None:\n        cache_timeout = current_app.get_send_file_max_age(filename)\n    if cache_timeout is not None:\n        rv.cache_control.max_age = cache_timeout\n        rv.expires = int(time() + cache_timeout)\n\n    if add_etags and filename is not None:\n        from warnings import warn\n\n        try:\n            rv.set_etag('%s-%s-%s' % (\n                os.path.getmtime(filename),\n                os.path.getsize(filename),\n                adler32(\n                    filename.encode('utf-8') if isinstance(filename, text_type)\n                    else filename\n                ) & 0xffffffff\n            ))\n        except OSError:\n            warn('Access %s failed, maybe it does not exist, so ignore etags in '\n                 'headers' % filename, stacklevel=2)\n\n    if conditional:\n        if callable(getattr(Range, 'to_content_range_header', None)):\n            # Werkzeug supports Range Requests\n            # Remove this test when support for Werkzeug <0.12 is dropped\n            try:\n                rv = rv.make_conditional(request, accept_ranges=True,\n                                         complete_length=fsize)\n            except RequestedRangeNotSatisfiable:\n                file.close()\n                raise\n        else:\n            rv = rv.make_conditional(request)\n        # make sure we don't send x-sendfile for servers that\n        # ignore the 304 status code for x-sendfile.\n        if rv.status_code == 304:\n            rv.headers.pop('x-sendfile', None)\n    return rv\n\n\ndef safe_join(directory, *pathnames):\n    \"\"\"Safely join `directory` and zero or more untrusted `pathnames`\n    components.\n\n    Example usage::\n\n        @app.route('/wiki/<path:filename>')\n        def wiki_page(filename):\n            filename = safe_join(app.config['WIKI_FOLDER'], filename)\n            with open(filename, 'rb') as fd:\n                content = fd.read()  # Read and process the file content...\n\n    :param directory: the trusted base directory.\n    :param pathnames: the untrusted pathnames relative to that directory.\n    :raises: :class:`~werkzeug.exceptions.NotFound` if one or more passed\n            paths fall out of its boundaries.\n    \"\"\"\n    for filename in pathnames:\n        if filename != '':\n            filename = posixpath.normpath(filename)\n        for sep in _os_alt_seps:\n            if sep in filename:\n                raise NotFound()\n        if os.path.isabs(filename) or \\\n           filename == '..' or \\\n           filename.startswith('../'):\n            raise NotFound()\n        directory = os.path.join(directory, filename)\n    return directory\n\n\ndef send_from_directory(directory, filename, **options):\n    \"\"\"Send a file from a given directory with :func:`send_file`.  This\n    is a secure way to quickly expose static files from an upload folder\n    or something similar.\n\n    Example usage::\n\n        @app.route('/uploads/<path:filename>')\n        def download_file(filename):\n            return send_from_directory(app.config['UPLOAD_FOLDER'],\n                                       filename, as_attachment=True)\n\n    .. admonition:: Sending files and Performance\n\n       It is strongly recommended to activate either ``X-Sendfile`` support in\n       your webserver or (if no authentication happens) to tell the webserver\n       to serve files for the given path on its own without calling into the\n       web application for improved performance.\n\n    .. versionadded:: 0.5\n\n    :param directory: the directory where all the files are stored.\n    :param filename: the filename relative to that directory to\n                     download.\n    :param options: optional keyword arguments that are directly\n                    forwarded to :func:`send_file`.\n    \"\"\"\n    filename = safe_join(directory, filename)\n    if not os.path.isabs(filename):\n        filename = os.path.join(current_app.root_path, filename)\n    try:\n        if not os.path.isfile(filename):\n            raise NotFound()\n    except (TypeError, ValueError):\n        raise BadRequest()\n    options.setdefault('conditional', True)\n    return send_file(filename, **options)\n\n\ndef get_root_path(import_name):\n    \"\"\"Returns the path to a package or cwd if that cannot be found.  This\n    returns the path of a package or the folder that contains a module.\n\n    Not to be confused with the package path returned by :func:`find_package`.\n    \"\"\"\n    # Module already imported and has a file attribute.  Use that first.\n    mod = sys.modules.get(import_name)\n    if mod is not None and hasattr(mod, '__file__'):\n        return os.path.dirname(os.path.abspath(mod.__file__))\n\n    # Next attempt: check the loader.\n    loader = pkgutil.get_loader(import_name)\n\n    # Loader does not exist or we're referring to an unloaded main module\n    # or a main module without path (interactive sessions), go with the\n    # current working directory.\n    if loader is None or import_name == '__main__':\n        return os.getcwd()\n\n    # For .egg, zipimporter does not have get_filename until Python 2.7.\n    # Some other loaders might exhibit the same behavior.\n    if hasattr(loader, 'get_filename'):\n        filepath = loader.get_filename(import_name)\n    else:\n        # Fall back to imports.\n        __import__(import_name)\n        mod = sys.modules[import_name]\n        filepath = getattr(mod, '__file__', None)\n\n        # If we don't have a filepath it might be because we are a\n        # namespace package.  In this case we pick the root path from the\n        # first module that is contained in our package.\n        if filepath is None:\n            raise RuntimeError('No root path can be found for the provided '\n                               'module \"%s\".  This can happen because the '\n                               'module came from an import hook that does '\n                               'not provide file name information or because '\n                               'it\\'s a namespace package.  In this case '\n                               'the root path needs to be explicitly '\n                               'provided.' % import_name)\n\n    # filepath is import_name.py for a module, or __init__.py for a package.\n    return os.path.dirname(os.path.abspath(filepath))\n\n\ndef _matching_loader_thinks_module_is_package(loader, mod_name):\n    \"\"\"Given the loader that loaded a module and the module this function\n    attempts to figure out if the given module is actually a package.\n    \"\"\"\n    # If the loader can tell us if something is a package, we can\n    # directly ask the loader.\n    if hasattr(loader, 'is_package'):\n        return loader.is_package(mod_name)\n    # importlib's namespace loaders do not have this functionality but\n    # all the modules it loads are packages, so we can take advantage of\n    # this information.\n    elif (loader.__class__.__module__ == '_frozen_importlib' and\n          loader.__class__.__name__ == 'NamespaceLoader'):\n        return True\n    # Otherwise we need to fail with an error that explains what went\n    # wrong.\n    raise AttributeError(\n        ('%s.is_package() method is missing but is required by Flask of '\n         'PEP 302 import hooks.  If you do not use import hooks and '\n         'you encounter this error please file a bug against Flask.') %\n        loader.__class__.__name__)\n\n\ndef find_package(import_name):\n    \"\"\"Finds a package and returns the prefix (or None if the package is\n    not installed) as well as the folder that contains the package or\n    module as a tuple.  The package path returned is the module that would\n    have to be added to the pythonpath in order to make it possible to\n    import the module.  The prefix is the path below which a UNIX like\n    folder structure exists (lib, share etc.).\n    \"\"\"\n    root_mod_name = import_name.split('.')[0]\n    loader = pkgutil.get_loader(root_mod_name)\n    if loader is None or import_name == '__main__':\n        # import name is not found, or interactive/main module\n        package_path = os.getcwd()\n    else:\n        # For .egg, zipimporter does not have get_filename until Python 2.7.\n        if hasattr(loader, 'get_filename'):\n            filename = loader.get_filename(root_mod_name)\n        elif hasattr(loader, 'archive'):\n            # zipimporter's loader.archive points to the .egg or .zip\n            # archive filename is dropped in call to dirname below.\n            filename = loader.archive\n        else:\n            # At least one loader is missing both get_filename and archive:\n            # Google App Engine's HardenedModulesHook\n            #\n            # Fall back to imports.\n            __import__(import_name)\n            filename = sys.modules[import_name].__file__\n        package_path = os.path.abspath(os.path.dirname(filename))\n\n        # In case the root module is a package we need to chop of the\n        # rightmost part.  This needs to go through a helper function\n        # because of python 3.3 namespace packages.\n        if _matching_loader_thinks_module_is_package(\n                loader, root_mod_name):\n            package_path = os.path.dirname(package_path)\n\n    site_parent, site_folder = os.path.split(package_path)\n    py_prefix = os.path.abspath(sys.prefix)\n    if package_path.startswith(py_prefix):\n        return py_prefix, package_path\n    elif site_folder.lower() == 'site-packages':\n        parent, folder = os.path.split(site_parent)\n        # Windows like installations\n        if folder.lower() == 'lib':\n            base_dir = parent\n        # UNIX like installations\n        elif os.path.basename(parent).lower() == 'lib':\n            base_dir = os.path.dirname(parent)\n        else:\n            base_dir = site_parent\n        return base_dir, package_path\n    return None, package_path\n\n\nclass locked_cached_property(object):\n    \"\"\"A decorator that converts a function into a lazy property.  The\n    function wrapped is called the first time to retrieve the result\n    and then that calculated result is used the next time you access\n    the value.  Works like the one in Werkzeug but has a lock for\n    thread safety.\n    \"\"\"\n\n    def __init__(self, func, name=None, doc=None):\n        self.__name__ = name or func.__name__\n        self.__module__ = func.__module__\n        self.__doc__ = doc or func.__doc__\n        self.func = func\n        self.lock = RLock()\n\n    def __get__(self, obj, type=None):\n        if obj is None:\n            return self\n        with self.lock:\n            value = obj.__dict__.get(self.__name__, _missing)\n            if value is _missing:\n                value = self.func(obj)\n                obj.__dict__[self.__name__] = value\n            return value\n\n\nclass _PackageBoundObject(object):\n\n    def __init__(self, import_name, template_folder=None, root_path=None):\n        #: The name of the package or module.  Do not change this once\n        #: it was set by the constructor.\n        self.import_name = import_name\n\n        #: location of the templates.  ``None`` if templates should not be\n        #: exposed.\n        self.template_folder = template_folder\n\n        if root_path is None:\n            root_path = get_root_path(self.import_name)\n\n        #: Where is the app root located?\n        self.root_path = root_path\n\n        self._static_folder = None\n        self._static_url_path = None\n\n    def _get_static_folder(self):\n        if self._static_folder is not None:\n            return os.path.join(self.root_path, self._static_folder)\n    def _set_static_folder(self, value):\n        self._static_folder = value\n    static_folder = property(_get_static_folder, _set_static_folder, doc='''\n    The absolute path to the configured static folder.\n    ''')\n    del _get_static_folder, _set_static_folder\n\n    def _get_static_url_path(self):\n        if self._static_url_path is not None:\n            return self._static_url_path\n        if self.static_folder is not None:\n            return '/' + os.path.basename(self.static_folder)\n    def _set_static_url_path(self, value):\n        self._static_url_path = value\n    static_url_path = property(_get_static_url_path, _set_static_url_path)\n    del _get_static_url_path, _set_static_url_path\n\n    @property\n    def has_static_folder(self):\n        \"\"\"This is ``True`` if the package bound object's container has a\n        folder for static files.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        return self.static_folder is not None\n\n    @locked_cached_property\n    def jinja_loader(self):\n        \"\"\"The Jinja loader for this package bound object.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        if self.template_folder is not None:\n            return FileSystemLoader(os.path.join(self.root_path,\n                                                 self.template_folder))\n\n    def get_send_file_max_age(self, filename):\n        \"\"\"Provides default cache_timeout for the :func:`send_file` functions.\n\n        By default, this function returns ``SEND_FILE_MAX_AGE_DEFAULT`` from\n        the configuration of :data:`~flask.current_app`.\n\n        Static file functions such as :func:`send_from_directory` use this\n        function, and :func:`send_file` calls this function on\n        :data:`~flask.current_app` when the given cache_timeout is ``None``. If a\n        cache_timeout is given in :func:`send_file`, that timeout is used;\n        otherwise, this method is called.\n\n        This allows subclasses to change the behavior when sending files based\n        on the filename.  For example, to set the cache timeout for .js files\n        to 60 seconds::\n\n            class MyFlask(flask.Flask):\n                def get_send_file_max_age(self, name):\n                    if name.lower().endswith('.js'):\n                        return 60\n                    return flask.Flask.get_send_file_max_age(self, name)\n\n        .. versionadded:: 0.9\n        \"\"\"\n        return total_seconds(current_app.send_file_max_age_default)\n\n    def send_static_file(self, filename):\n        \"\"\"Function used internally to send static files from the static\n        folder to the browser.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        if not self.has_static_folder:\n            raise RuntimeError('No static folder for this object')\n        # Ensure get_send_file_max_age is called in all cases.\n        # Here, we ensure get_send_file_max_age is called for Blueprints.\n        cache_timeout = self.get_send_file_max_age(filename)\n        return send_from_directory(self.static_folder, filename,\n                                   cache_timeout=cache_timeout)\n\n    def open_resource(self, resource, mode='rb'):\n        \"\"\"Opens a resource from the application's resource folder.  To see\n        how this works, consider the following folder structure::\n\n            /myapplication.py\n            /schema.sql\n            /static\n                /style.css\n            /templates\n                /layout.html\n                /index.html\n\n        If you want to open the :file:`schema.sql` file you would do the\n        following::\n\n            with app.open_resource('schema.sql') as f:\n                contents = f.read()\n                do_something_with(contents)\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\"\n        if mode not in ('r', 'rb'):\n            raise ValueError('Resources can only be opened for reading')\n        return open(os.path.join(self.root_path, resource), mode)\n\n\ndef total_seconds(td):\n    \"\"\"Returns the total seconds from a timedelta object.\n\n    :param timedelta td: the timedelta to be converted in seconds\n\n    :returns: number of seconds\n    :rtype: int\n    \"\"\"\n    return td.days * 60 * 60 * 24 + td.seconds\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":1843.9544296264648,"scrollleft":0,"selection":{"start":{"row":167,"column":31},"end":{"row":167,"column":31},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":143,"state":"start","mode":"ace/mode/python"}},"timestamp":1492927198982}